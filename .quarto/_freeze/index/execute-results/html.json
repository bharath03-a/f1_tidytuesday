{
  "hash": "d76a661bbf5021ab1a27359dde9c10e9",
  "result": {
    "markdown": "---\ntitle: \"F1 Analysis\"\nauthor: \"Bharath Velamala\"\ndescription: \"Data Visualization using R on tidyTuesday dataset\"\nformat: \n  html:\n      code-tools: true\n      code-link: true\ntoc: true\ncode-annotations: hover\ncategories: \n  - R\n  - DataViz\n  - TidyTuesday\n---\n\n\n# Formula 1 Races\n\nThe data this week comes from the [Ergast API](https://ergast.com/mrd/db/#csv), which has a CC-BY license. H/t to [Sara Stoudt](https://github.com/rfordatascience/tidytuesday/issues/372) for sharing the link to the data by way of [Data is Plural](https://www.data-is-plural.com/archive/2021-08-25-edition/)!\n\n[FiveThirtyEight](https://fivethirtyeight.com/features/formula-one-racing/) published a nice article on \"Who's The Best Formula One Driver Of All Time?\". While the ELO data is not present in this dataset, you could calculate your own rating or using the [`{elo}`](https://github.com/eheinzen/elo) package to create ELO scores.\n\n## Set up\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n### GETTING THE LIBRARIES\nif (!require(pacman)) #<1>\n  install.packages(pacman)\n\n\npacman::p_load(tidyverse,\n               openintro,\n               gridExtra,\n               tidytuesdayR,\n               dplyr,\n               dlookr,\n               DMwR2,  # Data Mining with R functions\n               GGally, # Pair-wise plots using ggplot2\n               Hmisc,  # Data analysis\n               formattable)   #<2>\n```\n:::\n\n\n1.  This block is to check if `pacman` package is installed or not, if it isn't then the package will be installed.\n\n2.  `p_load` is a function from `pacman` package to load other packages, if isn't installed `pacman` will handle the installation.\n\nSetting the default theme ggplot and output options for the chunk - as suggested in the class.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n### setting theme for ggplot2\nggplot2::theme_set(ggplot2::theme_minimal(base_size = 14, base_family = \"sans\"))\n\n\n# setting width of code output\noptions(width = 65)\n\n# setting figure parameters for knitr\nknitr::opts_chunk$set(\n  fig.width = 8,        # 8\" width\n  fig.asp = 0.618,      # the golden ratio\n  fig.retina = 4,       # dpi multiplier for displaying HTML output on retina\n  fig.align = \"center\", # center align figures\n  dpi = 350             # higher dpi, sharper image\n)\n```\n:::\n\n\n## Getting Data\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ntuesdata <- tidytuesdayR::tt_load('2021-09-07')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n\tDownloading file 1 of 13: `circuits.csv`\n\tDownloading file 2 of 13: `constructor_results.csv`\n\tDownloading file 3 of 13: `constructor_standings.csv`\n\tDownloading file 4 of 13: `constructors.csv`\n\tDownloading file 5 of 13: `driver_standings.csv`\n\tDownloading file 6 of 13: `drivers.csv`\n\tDownloading file 7 of 13: `lap_times.csv`\n\tDownloading file 8 of 13: `pit_stops.csv`\n\tDownloading file 9 of 13: `qualifying.csv`\n\tDownloading file 10 of 13: `races.csv`\n\tDownloading file 11 of 13: `results.csv`\n\tDownloading file 12 of 13: `seasons.csv`\n\tDownloading file 13 of 13: `status.csv`\n```\n:::\n\n```{.r .cell-code}\nresults <- tuesdata$results\ndriver_standings <- tuesdata$driver_standings\nraces <- tuesdata$races\ndrivers <- tuesdata$drivers\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndriver_results_df <- driver_standings |>\n  left_join(races, by = \"raceId\") |>\n  rename(driver_url = url) |>\n  left_join(drivers, by = \"driverId\") |> filter( year >= 2020)\n\nmissing_count <- colSums(is.na(driver_results_df))\n\nmissing_count\n```\n\n::: {.cell-output .cell-output-stdout}\n```\ndriverStandingsId            raceId          driverId \n                0                 0                 0 \n           points          position      positionText \n                0                 0                 0 \n             wins              year             round \n                0                 0                 0 \n        circuitId              name              date \n                0                 0                 0 \n             time        driver_url         driverRef \n                0                 0                 0 \n           number              code          forename \n                0                 0                 0 \n          surname               dob       nationality \n                0                 0                 0 \n              url \n                0 \n```\n:::\n:::\n\n\n## Questions\n\n#### Who's the youngest F1 driver with the most wins? Who's the oldest F1 driver in the history of the sport? And who's everyone in between?\n\n::: callout-note\nGetting only data after 2017 for relevancy!\n:::\n\nAs of now the unknowns are age of the drivers, and their position in the races. We need to two new columns to cater that data.\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncalculateAge <- function(dob) {\n  # Convert DOB to Date class\n  dob <- as.Date(dob)\n  \n  # Calculate age\n  age <- as.integer(difftime(Sys.Date(), dob, units = \"days\") / 365)\n  \n  return(age)\n}\n\ngetRacePos <- function(position) {\n  case_when(\n    position == 1 ~ \"WINNER\",\n    (position > 1 & position <=3) ~ \"PODIUM\",\n    (position > 3 & position <=10) ~ \"TOP10\",\n    TRUE ~ \"Other\"  # Default case when none of the above conditions are met\n  )\n}\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ndriver_results_df <- driver_results_df |> mutate(\n  drivers_age = calculateAge(driver_results_df$dob),\n  race_pos = getRacePos(driver_results_df$position)\n)\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(driver_results_df, mapping = aes(x = code, y = drivers_age)) +\n  geom_point(aes(color = race_pos, size=3), stat='identity') + \n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/initial_plot-1.png){fig-align='center' width=2800}\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}